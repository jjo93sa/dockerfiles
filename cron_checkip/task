#!/bin/bash
#
# Title: task
#
# Description:
#   Script intended for execution in cron to detect and send alerts of external
#   (public) IP address changes. Uses scripts from the repositories listed in
#   the "Dependencies" section to provide most of the functionality.
#
#   Notifications are provided by pushover.net; IP address detection by
#   ipinfo.io; and, dynamic DNS services by duckdns.org.
#
#   An example implementation of this service can be found in Docker image
#   r.j2o.it/cron_checkip, which has been built to execute this script every
#   5 minutes. r.j2o.it/cron_checkip is based on image r.j2o.it/cron, which
#   requires a script called "task" to define the process to be executed by
#   cron. This script fulfils that role. Docker files for both images may be
#   found at: https://github.com/jjo93sa/dockerfiles.git. Also in that repo
#   is a template environment file (checkip.env) for your user and access
#   tokens from the three dependency services.
#
# Dependencies:
#   Requires scripts from the following repositories:
#
#   - https://github.com/jjo93sa/ip-utils.git
#   - https://github.com/jjo93sa/notification-utils.git
#   - https://github.com/jjo93sa/script-utils.git
#
#   Which themselves require accounts with:
#
#   - ipinfo.io
#   - duckdns.org
#   - pushover.net
#
# Usage:
#   Run this script in a crontab, for example, using a "concrete" instance of
#   image r.j2o.it/cron (see https://github.com/jjo93sa/dockerfiles.git).
#
# Maintainer:
#   James Osborne, dr.j.osborne@gmail.com
#
# License:
#   MIT, see LICENSE file in repository root
#

: ${REPEAT=5}
: ${DELAY=20}

#TODO: Should perhaps convert these to tests to ensure that the files exist

# Source logging tools and script control tools from script-utils repo
source /usr/local/bin/script_logging
source /usr/local/bin/script_ctrl

# Source notification script from notification-utils repo
source /usr/local/bin/pushover

# Source ip and dns scripts from ip-utils repo
source /usr/local/bin/get_ip_info
source /usr/local/bin/update_dns

# Test if this script is blocked, and exit if it is
if test_blocked
then
   exit 0
fi

# Get the current external IP address using function in get_ip_info.
# get_pub_ip_retry repeatedly attempts to get the IP address from ipinfo.io
# It will either return a well-formatted address and a zero exit code, or it
# will return an empty string and non-zero code.
if IP_ADDRESS=$(get_pub_ip_retry $REPEAT $DELAY)
then
    # We have a good IP address
    # Get the IP address from the RUN_FILE, where it was stored at last change
    OLD_IP_ADDRESS=$(grep -Eo '[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}' $RUN_FILE)

    # Set OLD_IP_ADDRESS to 0.0.0.0 if no address found in RUN_FILE, e.g start-up
    [[ -z "$OLD_IP_ADDRESS" ]] && OLD_IP_ADDRESS="0.0.0.0"

    # Take action if there's a difference between the old and new addresses:
    if [ "$IP_ADDRESS" != "$OLD_IP_ADDRESS" ]
    then
        ALERT_MSG="IP change from $OLD_IP_ADDRESS to $IP_ADDRESS"

        # Update DNS:
        if update_duckdns_retry "$DOM_TO_CHECK" "$IP_ADDRESS" "$REPEAT" "$DELAY"
        then
            ALERT_MSG+=" & Duck DNS updated successfully"
        else
            ALERT_MSG+=" & Duck DNS update failed"
        fi

        # Store the new IP address in the $RUN_FILE for the next execution
        update_run "$IP_ADDRESS"

        # Alert the user:
        echo "$ALERT_MSG" | write_log | pushover
    else
        # Same IP hasn't changed, so just record execution of this script
        update_run
    fi
else
    # No IP was retrieved, we might consider alerting the user, but for now log
    # a message and update the script execution time
    #ASSUME exit code here is that of the call to get_pub_ip_retry()
    write_log "NO IP address retrieved by get_pub_ip_retry $?"
    update_run
fi

# Delete old log files
clean_old_logs

exit $?
