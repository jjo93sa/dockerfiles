#!/usr/bin/env bash
#
# Title:  build-all
#
# Description:
#   Create an image for each Dockerfile found in a directory. build-all uses
#   an experimental Docker feature, buildx, which allows us to build
#   multi-platform images, that is images with manifests for multiple
#   architectures. Script defaults to building arm, arm64 and amd64 images.
#
#   Docker buildx requires some configuration before it can be used. I followed
#   the guide here: https://engineering.docker.com/2019/04/multi-arch-images/
#
#   We define three types of Dockerfile to build:
#     Type 1 - Standard Docker images, which may be used standalone or as the
#              basis for another image.
#     Type 2 - Base images, which are those that may not be used standalone,
#              but are intended to be used as the base of another Docker image
#     Type 3 - These are images derived from a Type 1 or Type 2 image, which
#              implies that the parent images must be built before the Type 3
#              files.
#
#   We ensure that the Type 1 and 2 images are built first. Type 3 images are
#   listed in a file called "subordinate". This file must have blank line if
#   no dependent, or Type 3, Dockerfiles exist, otherwise no images will be
#   built.
#
# Dependencies:
#   (1) Assumes that the Dockerfiles are contained in a structure like this:
#       ./project-name/Dockerfile
#   (2) Assumes any Type 3 Docker files are listed in a file called
#       "subordinate" in the root of the Docker file structure. (See example
#       in this repo.)
#   (3) Requires Bash version >4 because uses mapfile.
#
# Credits:
#   Heavily based on the build-all script of jessfraz, see:
#   https://github.com/jessfraz/dockerfiles/blob/master/build-all.sh
#
# Usage:
#   Usage of this file is very simple:
#
#   (0) Login to your Docker registry (the one specified with the -p switch);
#   (1) Place this script in the root of your Dockerfile project;
#   (2) Execute the script ./build-all with the appropriate options, which are
#       described below. In addition, one environment variable is used to
#       control the docker build command:
#       NO_CACHE - which is used to set the --no-cache switch &
#   (3) Build status is shown at the end of the process, specifically any
#       images that failed to build/push are reported.
#
# Maintainer:
#   dr.j.osborne@gmail.com
#
# License:
#   MIT, see file in repository root.
#
set -eu
set -o pipefail

# Get our path & name
SCRIPT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"

# Error file, zero out on launch
ERROR_FILE="$(mktemp)"

# Create a file for existing repository list
EXISTING=$(mktemp) && touch "${EXISTING}"

# Declare these variables (because we have set -u)
CMP_REG=
EXC_REP=
REP_LST=

# counters
CNT_TOTAL=0
CNT_PROGRESS=0
CNT_SECTION_TOTAL=0
CNT_SECTION_PROGRESS=0
CNT_FAIL=0
CNT_SUCCESS=0

# Custom error codes:
ERR_OPTIONS_FALSE=200

function box
{
    t="xx$1xx"
    c=${2:-=}
    echo "${t//?/$c}"
    echo "$c $1 $c"
    echo "${t//?/$c}"
}

function info
{
    tput setaf 4
    echo "$@"
    tput sgr0
}

function success
{
    tput setaf 2
    echo "$@"
    tput sgr0
}

function fail
{
    tput setaf 1
    echo "$@"
    tput sgr0
}


function help
{
cat <<End-of-message

build-all - build all Docker images described by Dockerfiles in a directory.
Can also be used to build and push a subset of repositories.

Synopsis:
Build all Dockerfiles in a directory:
    build-all [-a ARCH1,ARCH2] [-d DIR] [-p REG] [-t TAG]

Build all Dockerfiles in a dir but not present in a registry, use -m flag:
    build-all -m REG [-a ARCH1,ARCH2] [-d DIR] [-p REG] [-t TAG]

Build specifc Dockerfiles, use -r flag and csv list:
    build-all -r REP,.. [-a ARCH1,ARCH2] [-d DIR] [-p REG] [-t TAG]

Help:
    build-all -h

A single repository might also be built thus:
    build-all build_push ARCH1,ARCH2,.. REG/IMAGE:TAG DIR

build-all -h        Print this help message and exit
          -a ARCH   Comma-separated list of platforms to build
                    Docker buildx is an experimental feature
                    default: linux/arm,linux/arm64,linux/amd64
          -d DIR    Set the Dockerfile search directory to DIR
                    default: current working directory
          -m REG    Only build Docker images missing from REG.
                    default: r.j2o.it
          -r R1,R2  Define which repositories in DIR to build
                    default: none (DIR is searched for all Dockerfiles)
                    implies: -m not set
          -p REG    Set the upstream/push registry to REG
                    default: rw.j2o.it
          -t TAG    Set the tag to apply to new images
                    default: latest
          -x R1,R2  Exclude this list of repositories from the build
                    default: empty list

End-of-message
}

function build_push()
{
    # Parameters
    # $1 - Platform list
    # $2 - build string
    # $3 - build directory

    # Build & push the image. buildx will build multiplatform images.
    # --pull => always attempt to pull a new image
    # --push => push image to registry
    # --no-cache => (if set) do not use cache in build
    # --tag => image tag, which has form: registry/repository:tag
    # shellcheck disable=SC2086
    docker buildx build ${NO_CACHE:- } --pull --push \
        --platform "${1}" \
        --tag "${BLD_STR}" \
        "${BLD_DIR}"
}

function process_files()
{
    # Parameters
    # $1 - Registry
    # $2 - Architecture list (relates to buildx --platform list)
    # $3 - Tag to apply to repository
    # $4 - Repository name (e.g. wget)
    # $5 - Path to parent directory of repository context

    # Repository context
    local BLD_DIR="${5}/${4}"

    # Image tag
    local BLD_STR="${1}/${4}:${3}"

    # Form ((CNT_PROGRESS++)) was giving errors
    ((CNT_PROGRESS += 1))
    ((CNT_SECTION_PROGRESS += 1))

    info "Build image:    [$BLD_STR]"
    info "Build progress: [$CNT_SECTION_PROGRESS/$CNT_SECTION_TOTAL ($CNT_PROGRESS/$CNT_TOTAL)]"
    info "Build context:  [$BLD_DIR]"

    # buildx can throw errors. We don't want to exit this script if it does,
    # instead we continue building the other (independent) containers
    set +e

    # build_push $PLATFORM $TAG $BUILD_DIR
    ( build_push "${2}" "${BLD_STR}" "${BLD_DIR}" )
    BUILD_STATUS=$?

    if [ $BUILD_STATUS -eq 0 ]
    then
        ((CNT_SUCCESS++))
        success  "Success, pushed image: [$BLD_STR]"
    else
        ((CNT_FAIL++))
        fail "Failure: [$BLD_STR]" | tee -a "${ERROR_FILE}"
    fi

    # Re-enable termination on error
    set -e

    echo
    info "Status"
    info "Section progress:    [$CNT_SECTION_PROGRESS/$CNT_SECTION_TOTAL]"
    info "Overall progress:    [$CNT_PROGRESS/$CNT_TOTAL]"
    info "Results (pass/fail): [$CNT_SUCCESS/$CNT_FAIL]"
    echo
    echo
}

main()
{
    # Let's process the command line flags
    while getopts ":a:d:hm:p:r:t:x:" opt; do
        case $opt in
            a)
                # This is the comma-separated list of architectures
                IMG_ARC="${OPTARG}"
                ;;
            d)
                # This is the docker directory containing all image/Dockerfile
                DCF_DIR="${OPTARG}"
                ;;
            h)
                # Display help and exit
                help
                exit 1
                ;;
            m)
                # Only build docker images missing in the registry (cf dir
                # specified with -d)
                CMP_REG="${OPTARG}"
                ;;
            r)
                # This is the list of repositories to build
                REP_LST="${OPTARG}"
                ;;
            p)
                # This is the registry to use for the push
                OUR_REG="${OPTARG}"
                ;;
            t)
                # This is the tag to use for the new image
                OUR_TAG="${OPTARG}"
                ;;
            x)
                # This is the list of repos to exclude from build
                EXC_REP="${OPTARG}"
                ;;
            \?)
                echo "$SCRIPT: invalid option supplied: -$OPTARG"
                exit 1
                ;;
            :)
                echo "$SCRIPT: -$OPTARG requires an argument"
                exit 1
                ;;
        esac
    done

    # Handle exclusivity of options
    if [ -n "$CMP_REG" ] && [ -n "$REP_LST" ]
    then
        fail "Options -m and -r are mutually exclusive"
        exit "$ERR_OPTIONS_FALSE"
    fi

    # Use the command line params, or the following defaults:
    DCF_DIR="${DCF_DIR:-$(pwd)}"
    IMG_ARC="${IMG_ARC:-linux/arm,linux/arm64,linux/amd64}"
    OUR_REG="${OUR_REG:-rw.j2o.it}"
    OUR_TAG="${OUR_TAG:-latest}"

    # Handle -m option
    if [ -n "$CMP_REG" ]
    then
        info "Getting repository list for ${CMP_REG}"

        # -m set; use r.j3ss.co/reg to list the existing docker repositories
        docker run r.j3ss.co/reg ls "${CMP_REG}" 2>/dev/null |
            awk 'NR>2 {print $1}' > "${EXISTING}"
    fi

    # Handle -x option. We have a CSV list of repositories to exclude from the
    # build. Separate them with new lines and append to $EXISTING (they will
    # then be removed from the list of repos to build in the next steps
    if [ -n "$EXC_REP" ]
    then
        echo "$EXC_REP" | tr ',' '\n' >> "${EXISTING}"
    fi

    # Now we need to get the list of repositories to build. This is either in
    # $REP_LIST (if -r switch used) or we search DCF_DIR for all Dockerfiles
    # and exclude existing repos (if -m switch used).
    if [ -n "$REP_LST" ]
    then
        # -r repository list specified, so we only use that going forward
        IFS=',' read -r -a REPO_LIST <<< "$REP_LST"
    else
        # Search for all Dockerfiles in directory:
        # - Munge the names to get repository list
        # - Combine it with the EXISTING repository list from -m REG above,
        #   EXISTING is empty if -m not given, so has no effect
        # - Sort and filter unique repositories, i.e. those not already in REG
        #TODO: What about repos in REG but not in DCF_DIR, eg a repo deleted
        #from DCF_DIR?
        mapfile -t REPO_LIST < <(find -L "${DCF_DIR}" -iname "*Dockerfile" -exec dirname {} \; |
        sed 's|^.*/||' |
        cat "${EXISTING}" - |
        sort |
        uniq -u)
    fi

    # Generate a list of Dockerfiles (Type 1 & 2):
    # - Remove all the repos contained in the subordinate list from REPO_LIST
    T12_LIST=()
    mapfile -t T12_LIST < <(for i in "${REPO_LIST[@]}"; do echo "$i"; done | grep -vf "${DCF_DIR}"/subordinate)

    # Generate a list of Dockerfiles (Type 3):
    # - Select only those repos in the subordinate list also in the REPO_LIST
    T_3_LIST=()
    mapfile -t T_3_LIST < <(for i in "${REPO_LIST[@]}"; do echo "$i"; done | grep -f "${DCF_DIR}"/subordinate || true)

    CNT_TOTAL=$((${#T12_LIST[@]}+${#T_3_LIST[@]}))

    info "Building $CNT_TOTAL Docker images"
    info "Errors logged to $ERROR_FILE"
    echo

    # Build any Type 1 & 2 Dockerfiles
    if [ ${#T12_LIST[@]} -gt 0 ]
    then
        CNT_SECTION_TOTAL=${#T12_LIST[@]}
        info "Building ${CNT_SECTION_TOTAL} type 1 and 2 images"
        for DCF in "${T12_LIST[@]}"
        do
            process_files "${OUR_REG}" "${IMG_ARC}" \
                "${OUR_TAG}" "${DCF}" "${DCF_DIR}"
        done
    else
        info "No type 1 or 2 images to build"
    fi

    CNT_SECTION_PROGRESS=0

    # Build any Type 3 Dockerfiles:
    if [ ${#T_3_LIST[@]} -gt 0 ]
    then
        CNT_SECTION_TOTAL=${#T_3_LIST[@]}
        info "Building ${CNT_SECTION_TOTAL} type 3 images"
        for DCF in "${T_3_LIST[@]}"
        do
            process_files "${OUR_REG}" "${IMG_ARC}" \
                "${OUR_TAG}" "${DCF}" "${DCF_DIR}"
        done
    else
        info "No type 3 images to build"
    fi

    echo
    echo "Summary:"
    success "Build success: $CNT_SUCCESS images"
    fail "Build failure: $CNT_FAIL images"
    echo
    if [ "$CNT_FAIL" -gt 0 ]
    then
        echo "Images that experienced errors:"
        cat "$ERROR_FILE"
    fi

    exit 0
}

# We set +u here because $1 might be unset if script has been called without
# parameters
set +u

if declare -f -- "$1" &> /dev/null
then
    # We've been called like this: path/script function <params>
    # AND that function name exists in this script file.
    "$@"
else
    # We've been called without a function name, so execute main
    main "$@"
fi
