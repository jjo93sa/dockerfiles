#!/bin/bash
#
# Title:  build-all
#
# Description:
#   Script to create an image for each Dockerfile found in a directory. Will
#   build Docker images for multiple architectures (configuration-dependent).
#   Docker for Mac will quite happily build arm32v6 (and I believe other)
#   images, which are useful for Raspberry Pi deployment.
#
#   Attempts to use GNU parallel (https://www.gnu.org/software/parallel/)
#   to speed-up the image creation & push to a registry. See the help text by
#   running ./build-all -h.
#
#   We define three types of Dockerfile to build:
#     Type 1 - Sandard Docker images, which may be used standalone or as the
#              basis for another image.
#     Type 2 - Base images, which are those that may not be used standalone,
#              but are intended to be used as the base of another Docker image
#     Type 3 - These are images derived from a Type 1 or Type 2 image, which
#              implies that the parent images must be built before the Type 3
#              files.
#
#   We ensure that the Type 1 and 2 images are built first. Type 3 images are
#   listed in a file called "subordinate". This file must have blank line if
#   no dependent, or Type 3 Docker files exist, otherwise no images will be
#   built.
#
# Dependencies:
#   (1) Assumes that the Dockerfiles are contained in a structure like this:
#       ./project-name/Dockerfile
#   (2) Assumes any Type 3 Docker files are listed in a file called
#       "subordinate" in the root of the Docker file structure. (See example
#       in this repo.)
#
# Credits:
#   Heavily based on the build-all script of jessfraz, see:
#   https://github.com/jessfraz/dockerfiles/blob/master/build-all.sh
#
# Usage:
#   Usage of this file is very simple:
#
#   (0) Login to your Docker registry (the one specified with the -r switch);
#   (1) Place this script in the root of your Dockerfile project;
#   (2) Execute the script ./build-all with the appropriate options, which are
#       summarized as:
#       build-all -h        Print help and exit
#           -a ARCH   Comma-separated list of architectures to build; default:
#                     x86-64. Building for foreign architectures is system
#                     dependent
#           -b JOBS   Jobs count to use if GNU Parallel is installed; default: 2
#           -d DIR    Set the Dockerfile search directory to DIR; default: current
#                     working directory
#           -r REG    Set the upstream registry to REG; default: rw.j2o.it
#           -t TAG    Set the tag to apply to new images; default: latest
#       Two environment variables are used to control the docker build command:
#       NO_CACHE - which is used to set the --no-cache switch &
#       QUIET - which is used to set the -q switch
#   (3) Check the build-errors.txt file for any problems during the build.
#
# Maintainer:
#   dr.j.osborne@gmail.com
#
# License:
#   MIT, see file in repository root.
#
set -eu
set -o pipefail

# Get our path & name
SCRIPT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"

ERROR_FILE="$(pwd)/build-errors.txt"


function box
{
    t="xx$1xx"
    c=${2:-=}
    echo ${t//?/$c}
    echo "$c $1 $c"
    echo ${t//?/$c}
}

function info
{
    tput setaf 4
    box "$@"
    tput sgr0
}

function success
{
    tput setaf 2
    box "$@"
    tput sgr0
}

function fail
{
    tput setaf 1
    box "$@"
    tput sgr0
}


function help
{
cat <<End-of-message

build-all - build all Docker images described by Dockerfiles in a directory

Synopsis:
build-all [-h] -a ARCH1,ARCH2 -b JOBS -d DIR -r REGISTRY -t TAG

build-all -h        Print this help message and exit
          -a ARCH   Comma-separated list of architectures to build; default:
                    x86-64. Building for foreign architectures is system
                    dependent
          -b JOBS   Jobs count to use if GNU Parallel is installed; default: 2
          -d DIR    Set the Dockerfile search directory to DIR; default: current
                    working directory
          -r REG    Set the upstream registry to REG; default: rw.j2o.it
          -t TAG    Set the tag to apply to new images; default: latest

End-of-message
}

function build_push()
{
    # Parameters
    # $1 - Registry
    # $2 - Platform list
    # $3 - Image name
    # $4 - Tag
    # $5 - build directory

    local BLD_DIR=$5
    local BLD_STR="$1/$3:$4"

    # Some environment variable from the host to control how we build
    QUIET=${QUIET+-q}
    NO_CACHE=${NO_CACHE+--no-cache}

    # Build & push the image. buildx will build multiplatform images.
    echo "Building $BLD_STR with context $BLD_DIR"
    docker buildx build --platform ${2} -t ${BLD_STR} --push ${BLD_DIR} \
        || return 1

    success  "SUCCESS: built & pushed $BLD_STR"
}

function process_files()
{
    # Parameters
    # $1 - File path from find
    # $2 - Registry
    # $3 - Arch list (buildx --platform)
    # $4 - Tag

    # $1 has format: path/to/wget/Dockerfile
    local BUILD_DIR=${1%\/Dockerfile} # Gives us: path/to/wget
    local IMAGE=${BUILD_DIR##*\/} # Gives us: wget
    local ARCH=$3

    # Subshell
    {
        info  "Starting build for: $IMAGE"

        # build_push $REPO $IMAGE $TAG $BUILD_DIR
        $SCRIPT build_push "${2}" "${ARCH}" "${IMAGE}" "$4" "${BUILD_DIR}"
    } || {
        fail "FAIL: Building ${IMAGE}:${4} FAILED with error $?" | tee -a $ERROR_FILE
    }
    echo
}

main()
{
    # Let's process the command line flags
    while getopts ":a:b:d:hr:t:" opt; do
        case $opt in
            a)
                # This is the comma-separated list of architectures
                IMG_ARC="${OPTARG}"
                ;;
            b)
                # This is the number of parallel jobs
                MAX_JOB="${OPTARG}"
                ;;
            d)
                # This is the docker directory containing all image/Dockerfile
                DCF_DIR="${OPTARG}"
                ;;
            h)
                # Display help and exit
                help
                exit 1
                ;;
            r)
                # This is the registry to use for the push
                OUR_REG="${OPTARG}"
                ;;
            t)
                # This is the tag to use for the new image
                OUR_TAG="${OPTARG}"
                ;;
            \?)
                echo "$SCRIPT: invalid option supplied: -$OPTARG"
                exit 1
                ;;
            :)
                echo "$SCRIPT: -$OPTARG requires an argument"
                exit 1
                ;;
        esac
    done

    # Use the command line params, or the following defaults:
    DCF_DIR="${DCF_DIR:-$(pwd)}"
    IMG_ARC="${IMG_ARC:-linux/arm,linux/amd64}"
    OUR_REG="${OUR_REG:-rw.j2o.it}"
    MAX_JOB="${MAX_JOB:-1}"
    OUR_TAG="${OUR_TAG:-latest}"

    IFS=$'\n'
    # Generate a list of Dockerfiles (type 1 and 2)
    DCF_LIST=( $(find -L ${DCF_DIR} -iname "*Dockerfile" | grep -vf ${DCF_DIR}/subordinate | sort -d) )
    # Generate a list of Dockerfiles (type 3)
    DEP_LIST=( $(find -L ${DCF_DIR} -iname "*Dockerfile" | grep -f ${DCF_DIR}/subordinate  | sort -d) )
    unset IFS

    #IFS=',' read -ra ARC_LIST <<< "$IMG_ARC"

    if [ -x "$(command -v parallel)" ]
    then
        # This is where we call parallel with the array list:
        # Type 1 & 2:
        parallel -u -j "${MAX_JOB}" $SCRIPT process_files "{1}" \
            "$OUR_REG" "${IMG_ARC}" "$OUR_TAG" ::: "${DCF_LIST[@]}"
        # Type 3:
        parallel -u -j "${MAX_JOB}" $SCRIPT process_files "{1}" \
            "$OUR_REG" "${IMG_ARC}" "$OUR_TAG" ::: "${DEP_LIST[@]}"
    else
        # Parallel isn't installed, so let's perform the build(s) serially
        # Process the type 1 and type 2 Dockerfiles, that is those that can
        # be built without dependencies on others
        for DCF in "${DCF_LIST[@]}"
        do
            $SCRIPT process_files "$DCF" "$OUR_REG" "$IMG_ARC" "$OUR_TAG"
        done

        # Process the type 3 Dockerfiles, that is those Dockerfiles that
        # depend on type 1 or type 2 Dockerfiles
        for DEP in "${DEP_LIST[@]}"
        do
            $SCRIPT process_files "$DEP" "$OUR_REG" "$IMG_ARC" "$OUR_TAG"
        done
    fi

    exit 0
}

if declare -f -- "$1" &> /dev/null
then
    # We've been called like this: path/script function <params>
    "$@"
else
    # We've been called without a function name, so execute main
    main "$@"
fi


